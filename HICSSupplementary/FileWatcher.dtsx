<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/16/2016 2:36:45 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="5CG4311KKM"
  DTS:CreatorName="AZ\SAllam"
  DTS:DTSID="{A5D7896D-4F05-4362-A6F8-A823AFEF9C4D}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.6020.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="FileWatcher"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="183"
  DTS:VersionGUID="{EB84754C-A01D-4503-B737-1751F13363A3}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9C939976-33FF-4732-B284-EA5429CBD3DA}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::FilesFolder]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="HICSSupplementaryDirectoryName">
      <DTS:VariableValue
        DTS:DataType="8">C:\Data\files\in\HICS\Supplementary\Testing</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6D450F76-9E22-491B-B606-581B69E54C62}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="WatcherIncludeSubDirectories">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9FE1EEF8-37FC-4C28-A504-3F80E1668F1F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="WatcherInputFindExistingFiles">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CAE14FDC-CB2C-4465-BB21-CFC8ADA7ECDC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="WatcherInputTimeoutAsWarning">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{035FFFEB-2A5A-4D7E-AC27-1CFE47C8B0E2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="WatcherInputTimeoutSeconds">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9633F599-2C2F-4AB4-BE40-02A0BCC9463E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="WatcherOutputFileName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\FileWatcher"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Script Task"
      DTS:DTSID="{dce53b0d-e39e-4702-9283-d84fa3c9320d}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="FileWatcher"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_a98cd0b316f44f10ad33b1bb5d061160"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::HICSSupplementaryDirectoryName,User::WatcherIncludeSubDirectories,User::WatcherInputFindExistingFiles,User::WatcherInputTimeoutAsWarning,User::WatcherInputTimeoutSeconds,$Project::WatcherInputFileMask1,$Project::WatcherInputFileMask2,$Project::WatcherInputFileMask3,$Project::WatcherInputFileMask4"
          ReadWriteVariables="User::WatcherOutputFileName">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_a98cd0b316f44f10ad33b1bb5d061160.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0C05E955-BC69-4108-B894-0B90F4CE7286}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7f9c9faab9464ac589ed3fb1cf26e984</RootNamespace>
    <AssemblyName>ST_a98cd0b316f44f10ad33b1bb5d061160</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="ICSharpCode.SharpZipLib">
      <HintPath>C:\Cognosante\SharpZipLib\ICSharpCode.SharpZipLib.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using System.Text.RegularExpressions;
using System.Diagnostics;
using ICSharpCode.SharpZipLib.Zip;
#endregion

namespace ST_7f9c9faab9464ac589ed3fb1cf26e984
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class. Testing.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        private FileInfo foundFile = null;
        
		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here
            string fileMask1 = Dts.Variables["$Project::WatcherInputFileMask1"].Value.ToString();
            string fileMask2 = Dts.Variables["$Project::WatcherInputFileMask2"].Value.ToString();
            string fileMask3 = Dts.Variables["$Project::WatcherInputFileMask3"].Value.ToString();
            string fileMask4 = Dts.Variables["$Project::WatcherInputFileMask4"].Value.ToString();
            string fileMask = "*.*";

            string[,] filterArray = new string[4, 2] 
            {
                {fileMask1,"N"},{fileMask2,"N"},{fileMask3,"N"},{fileMask4,"N"}
            };

            try
            {
                string dropDirectory = Dts.Variables["User::HICSSupplementaryDirectoryName"].Value.ToString();
                bool includeSubdirectories = Convert.ToBoolean(Dts.Variables["User::WatcherIncludeSubDirectories"].Value);
                bool findExistingFiles = Convert.ToBoolean(Dts.Variables["User::WatcherInputFindExistingFiles"].Value);

                if (findExistingFiles)
                {
                    FindExistingFile(dropDirectory, filterArray, includeSubdirectories);
                 }

                if (foundFile == null)
                {
                    bool timeoutAsWarning = Convert.ToBoolean(Dts.Variables["User::WatcherInputTimeoutAsWarning"].Value);
                    int timeoutSeconds = Convert.ToInt32(Dts.Variables["User::WatcherInputTimeoutSeconds"].Value);
                    int timeoutMilliseconds = (timeoutSeconds == 0 ? -1 : timeoutSeconds * 1000);
                    WatchForFileCreation(dropDirectory, fileMask, includeSubdirectories, timeoutAsWarning, timeoutMilliseconds);
                }

                // Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null, e.Message, string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
                return;
            }
		}

#region Private Methods

        private void WatchForFileCreation (string dropDirectory, 
                String fileMask, 
                bool includeSubdirectories,
                bool timeoutAsWarning,
                int timeoutMilliseconds)
        {
            FileSystemWatcher fileSystemWatcher = new FileSystemWatcher();
            fileSystemWatcher.Path = dropDirectory;
            fileSystemWatcher.IncludeSubdirectories = includeSubdirectories;
            fileSystemWatcher.Filter = fileMask;
            fileSystemWatcher.Created += new FileSystemEventHandler(OnFileCreate);
            fileSystemWatcher.EnableRaisingEvents = true;

            fileSystemWatcher.WaitForChanged(WatcherChangeTypes.Created);
           
        }

        private void OnFileCreate(object source, FileSystemEventArgs e)
        {
            try
            {
                String FileCreated = e.FullPath;
                var watcher = source as FileSystemWatcher;
                if (watcher != null)
                {
                    watcher.EnableRaisingEvents = false;
                }
                string fileMask1 = Dts.Variables["$Project::WatcherInputFileMask1"].Value.ToString();
                string fileMask2 = Dts.Variables["$Project::WatcherInputFileMask2"].Value.ToString();
                string fileMask3 = Dts.Variables["$Project::WatcherInputFileMask3"].Value.ToString();
                string fileMask4 = Dts.Variables["$Project::WatcherInputFileMask4"].Value.ToString();

                string[,] filterArray = new string[4, 2] 
                {
                    {fileMask1,"N"},{fileMask2,"N"},{fileMask3,"N"},{fileMask4,"N"}
                };

                string dropDirectory = Dts.Variables["User::HICSSupplementaryDirectoryName"].Value.ToString();
                DirectoryInfo directoryInfo = new DirectoryInfo(dropDirectory);

                bool fireAgain = true;

                waitForCompletion(dropDirectory, directoryInfo);

                unZipFilesAndDeleteZipFolders(directoryInfo, dropDirectory, filterArray);

                Dts.Events.FireInformation(0, null, "Directory ready for processing: " + dropDirectory, String.Empty, 0, ref fireAgain);
                directoryInfo = null;

            }
            catch (Exception f)
            {
                Dts.Events.FireError(0, null, f.Message, string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
           
        }

        private void waitForCompletion (String dropDirectory, DirectoryInfo directoryInfo)
        {
            try
            {
                // PreProcessFoundFile( new FileInfo(e.FullPath));
                DateTime LastWrite = directoryInfo.LastWriteTime;
                Stopwatch sw = new Stopwatch();
                sw.Restart();
                int secondWithoutAccess = 0;
                do
                {
                    if (sw.ElapsedMilliseconds > 6000)
                    {
                        directoryInfo.Refresh();
                        DateTime LastWrite2 = directoryInfo.LastWriteTime;
                        if (LastWrite2 > LastWrite)
                        {
                            secondWithoutAccess = 0;
                            LastWrite = LastWrite2;
                        }
                        else secondWithoutAccess++;
                        sw.Restart();
                    }
                }
                while (secondWithoutAccess < 30);
                
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null, e.Message, string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        private void FindExistingFile( string directoryName, String[,] filterArray,bool includeSubdirectories)
                {
                    bool fireAgain = true;
                    DirectoryInfo directoryInfo = new DirectoryInfo(directoryName);
                    FileInfo[] fileInfos;

                    string fileFilter = "";
                    int foundFiles = 0 ;
                    
                    if (includeSubdirectories)
                         { fileInfos = directoryInfo.GetFiles("*.*", SearchOption.AllDirectories); }
                    else
                        { fileInfos = directoryInfo.GetFiles("*.*", SearchOption.TopDirectoryOnly); }

                    foreach (FileInfo file in fileInfos)
                    {
                        for (int i = 0; i <= (filterArray.GetUpperBound(0) - filterArray.GetLowerBound(0)); i++)
                        {
                            fileFilter = filterArray[i, 0].ToString();
                            if (file.FullName.Contains(fileFilter))
                            {
                                foundFiles += 1;
                            }
                        }
                    }

                    if (foundFiles > 0)
                    {
                        unZipFilesAndDeleteZipFolders(directoryInfo, directoryName, filterArray);
                        // PreProcessFoundFile(fileInfos[0]);
                        this.foundFile = fileInfos[0];
                        Dts.Events.FireInformation(0,null,"Existing Files Found: "+fileInfos.Length.ToString(), string.Empty, 0, ref fireAgain);
                        Dts.TaskResult = (int)ScriptResults.Success;
                    }
                    else
                    {
                        Dts.Events.FireWarning(0, null, " No Existsing Files Found: ",string.Empty,0);
                    }
                    directoryInfo = null;

                }

        private void unZipFilesAndDeleteZipFolders(DirectoryInfo directoryInfo, String folder, String[,] filterArray)
        {
            //unzip the files and delete the zip folders
            try
            {
                String fileFullName = "";
                string fileFilter = "";

                FileInfo[] fileInfos;
                fileInfos = directoryInfo.GetFiles("*.zip*");

                foreach (FileInfo file in fileInfos)
                {
                    for (int i = 0; i <= (filterArray.GetUpperBound(0) - filterArray.GetLowerBound(0)); i++)
                    {
                        fileFilter = filterArray[i, 0].ToString();
                        if (file.FullName.Contains(fileFilter))
                        {
                            fileFullName = file.FullName;
                            UnZip(fileFullName, folder, 4000);
                            file.Delete();
                        }
                    }
                }
                directoryInfo = null;

            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null, e.Message, string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void UnZip(string SrcFile, string DstFile, int BufferSize)
        {
            try
            {
                FileStream fileStreamIn = new FileStream(SrcFile, FileMode.Open, FileAccess.Read);
                ZipInputStream zipInStream = new ZipInputStream(fileStreamIn);
                ZipEntry entry = zipInStream.GetNextEntry();
                FileStream fileStreamOut = new FileStream(DstFile + @"\" + entry.Name, FileMode.Create, FileAccess.Write);

                int size;
                byte[] buffer = new byte[BufferSize];
                do
                {
                    size = zipInStream.Read(buffer, 0, buffer.Length);
                    fileStreamOut.Write(buffer, 0, size);
                } while (size > 0);

                zipInStream.Close();
                fileStreamOut.Close();
                fileStreamIn.Close();
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null, e.Message, string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }
#endregion
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };

        enum ExitCode : int
        {
            Success = 0,
            InvalidLogin = 1,
            InvalidFilename = 2,
            UnknownError = 10
        }

        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_7f9c9faab9464ac589ed3fb1cf26e984</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_7f9c9faab9464ac589ed3fb1cf26e984</msb:DisplayName>
		<msb:ProjectId>{ED152FBB-62E8-4826-B6D1-46763A009BC4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_a98cd0b316f44f10ad33b1bb5d061160.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties.Settings.get_Default():ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties.Sett" +
    "ings")]

namespace ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7f9c9faab9464ac589ed3fb1cf26e984")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7f9c9faab9464ac589ed3fb1cf26e984")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7f9c9faab9464ac589ed3fb1cf26e984.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_a98cd0b316f44f10ad33b1bb5d061160.dll">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
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5
AAAAAAUAbAAAAKQGAAAjfgAAEAcAAAQKAAAjU3RyaW5ncwAAAAAUEQAAnAMAACNVUwCwFAAAEAAA
ACNHVUlEAAAAwBQAAAgDAAAjQmxvYgAAAAAAAAACAAABVx2iCQkDAAAA+iUzABYAAAEAAAA2AAAA
BgAAAAwAAAAPAAAAEwAAAEgAAAAGAAAADwAAAAgAAAACAAAAAwAAAAQAAAABAAAAAQAAAAYAAAAB
AAAAAgAAAAAACgABAAAAAAAGAMoAwwAKAOYA0QAOAEYBHQEGAGIBwwAGAHgBZwEGAKkBlAEGAC0C
IwIKAFoCIwIGAHsCIwIGANcDvQMGAAIE8AMGABkE8AMGADYE8AMGAFUE8AMGAG4E8AMGAIcE8AMG
AKIE8AMGAL0E8AMGANYE8AMGAA8F7wQGAC8F7wQGAIQFcQUGAKEFwwAGAKYFwwAGAMoF8AMKAPYF
4AUKAA8G4AUGACQG7wQOAEYGHQEOAGgGHQESAMEGoQYSANkGoQYGAAIHwwAOABwHHQEGADsHwwAG
AFEHwwAKAHcHIwIKALcHIwIKAPIHIwIKAAcIIwIGAE0IIwIGAFwIwwAKAHcIcQUGALgIIwIGAOgI
wwAGAAoJwwAGACMJIwIGAC4JIwIGADcJIwIWAHYJWgkaAIUJIwIWAIwJWgkGAKsJwwAGAIUJIwIA
AAAAAQAAAAAAAQABAAAAEAAyADwABQABAAEAAAEQAGsAPAAJAAMABQABABAAdAB/AA0ABAAIAAMB
AACjAAAAEQAFABAAAwEAALEAAAARAAgAEAARAIgBEwARALUBFwARAP8BOQABADYCRwAGBtAChABW
gNgChwBWgOAChwAGBtAChABWgNgClQBWgOgClQBWgPUClQBWgAUDlQBQIAAAAACDGMUBGwABAFgg
AAAAAJMIywEfAAEAkSAAAAAAkwjfASQAAQCYIAAAAACTCOsBKQABAKAgAAAAAJYIDwI9AAIAsyAA
AAAAhhjFARsAAgCnIAAAAACRGD8G1AACALwgAAAAAIYAQAIbAAIA4CIAAAAAgQBFAksAAgAsIwAA
AACBAG4CVAAHAPwkAAAAAIEAiQJbAAkAnCUAAAAAgQCbAmIACwCwJgAAAACBAKwCbwAOAIwnAAAA
AIEAygJ9ABEARCgAAAAAhhjFARsAFAAAAAEAEgMAAAEAGAMAAAIAJgMAAAMALwMAAAQARQMAAAUA
VgMAAAEAagMAAAIAcQMAAAEAGAMAAAIAcwMAAAEAgQMAAAIAjwMAAAMALwMAAAEAcwMAAAIAmwMA
AAMAjwMAAAEAogMAAAIAqgMAAAMAsgNRAMUBowBZAMUBowBhAMUBowBpAMUBowBxAMUBowB5AMUB
owCBAMUBowCJAMUBowCRAMUBowCZAMUBowChAMUBqACpAMUBGwCxAMUBGwAJAMUBGwC5ALgFrQC5
ANMFtAApAMUBuQDRAMUBxQDhAMUBGwARAMUBGwDpAMUBGwAZAHoG2ADxAMsG3QD5AOIG4gABAesG
6QAJAPUG7QAMAMUB+QAMAP4G/wAJAQoHBgEJARQHCwHxADAHEAEZAUUH7QAhAVgHFgERAV4HGQHx
AGgHqAApAcUBGwApAYkHowApAZIHQQEpAawHowAxAcUBRgEpAc4HTAEpAdoHQQEpARoIUwFBACkI
7QBJAMUBowAhATYIYgERAT0IaAFJAWUIkgFZAcUBGwBZAYEIGwBZAYkImAFJAaEIGwBRAakInAFJ
AMUItgEMAM4IwAFJAdII7QAhAd8IxgFpAe4IywFpAfwIywFxAfUG7QARARAJ0AFJAMUI7AFJARwJ
GwB5AcUBBQKRAcUBGQKRAZUJIAKhAaIJ7QAhATYIJgKxAbAJLQKxAbUJNQKxAbsJGwAZAMUBGwAI
ABgAiwAIABwAkAAIACQAiwAIACgAkAAIACwAmQAIADAAngApAJMAywAuABsAwwIuACMAwwIuAGMA
6QIuAAsAUgIuABMAmgIuADMAmgIuACsAwwIuADsAyQIuAEMAwwIuAFsA4AJDAGsAkABJAJMAywBh
AJsAkACDAKsAkADAACIBXAFzAaYB2QHzAT0CAgABAAMAAwAAAHgBLwAAAPcBNAAAABsCQgACAAIA
AwACAAMABQABAAQABQACAAUABwDxAASAAAABAAAAEBfkcwAAAAAAAE0FAAAEAAAAAAAAAAAAAAAB
ALoAAAAAAAQAAAAAAAAAAAAAAAEAwwAAAAAACwAAAAAAAAAAAAAACgD+AAAAAAALAAAAAAAAAAAA
AAAKAIIGAAAAAAAAVQAEAHEBAAAAABACQgkAAAAAAgAAAAAAAAAAAAAAAQC6AAAAAAAAAAAAAQAA
AMEJAAAFAAQABgAEAAAAADxNb2R1bGU+AFNUX2E5OGNkMGIzMTZmNDRmMTBhZDMzYjFiYjVkMDYx
MTYwLmRsbABSZXNvdXJjZXMAU1RfN2Y5YzlmYWFiOTQ2NGFjNTg5ZWQzZmIxY2YyNmU5ODQuUHJv
cGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNUXzdmOWM5ZmFhYjk0NjRhYzU4OWVkM2ZiMWNm
MjZlOTg0AFNjcmlwdFJlc3VsdHMARXhpdENvZGUAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0
ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2Vy
dmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNl
TWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNv
dXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3Vs
dHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AFN5c3RlbS5J
TwBGaWxlSW5mbwBmb3VuZEZpbGUATWFpbgBXYXRjaEZvckZpbGVDcmVhdGlvbgBGaWxlU3lzdGVt
RXZlbnRBcmdzAE9uRmlsZUNyZWF0ZQBEaXJlY3RvcnlJbmZvAHdhaXRGb3JDb21wbGV0aW9uAEZp
bmRFeGlzdGluZ0ZpbGUAdW5aaXBGaWxlc0FuZERlbGV0ZVppcEZvbGRlcnMAVW5aaXAAdmFsdWVf
XwBTdWNjZXNzAEZhaWx1cmUASW52YWxpZExvZ2luAEludmFsaWRGaWxlbmFtZQBVbmtub3duRXJy
b3IAdmFsdWUAZHJvcERpcmVjdG9yeQBmaWxlTWFzawBpbmNsdWRlU3ViZGlyZWN0b3JpZXMAdGlt
ZW91dEFzV2FybmluZwB0aW1lb3V0TWlsbGlzZWNvbmRzAHNvdXJjZQBlAGRpcmVjdG9yeUluZm8A
ZGlyZWN0b3J5TmFtZQBmaWx0ZXJBcnJheQBmb2xkZXIAU3JjRmlsZQBEc3RGaWxlAEJ1ZmZlclNp
emUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lz
dGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9u
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBB
c3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmli
dXRlAFNUX2E5OGNkMGIzMTZmNDRmMTBhZDMzYjFiYjVkMDYxMTYwAFN5c3RlbS5EaWFnbm9zdGlj
cwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2Rl
bABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJH
ZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0
ZQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERU
UwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVz
AFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBTZXQAQ29udmVydABUb0Jvb2xl
YW4AVG9JbnQzMgBFdmVudHNPYmplY3RXcmFwcGVyAGdldF9FdmVudHMARXhjZXB0aW9uAGdldF9N
ZXNzYWdlAFN0cmluZwBFbXB0eQBGaXJlRXJyb3IAc2V0X1Rhc2tSZXN1bHQARmlsZVN5c3RlbVdh
dGNoZXIAc2V0X1BhdGgAc2V0X0luY2x1ZGVTdWJkaXJlY3RvcmllcwBzZXRfRmlsdGVyAEZpbGVT
eXN0ZW1FdmVudEhhbmRsZXIAYWRkX0NyZWF0ZWQAc2V0X0VuYWJsZVJhaXNpbmdFdmVudHMAV2Fp
dEZvckNoYW5nZWRSZXN1bHQAV2F0Y2hlckNoYW5nZVR5cGVzAFdhaXRGb3JDaGFuZ2VkAGdldF9G
dWxsUGF0aABDb25jYXQARmlyZUluZm9ybWF0aW9uAEZpbGVTeXN0ZW1JbmZvAERhdGVUaW1lAGdl
dF9MYXN0V3JpdGVUaW1lAFN0b3B3YXRjaABSZXN0YXJ0AGdldF9FbGFwc2VkTWlsbGlzZWNvbmRz
AFJlZnJlc2gAb3BfR3JlYXRlclRoYW4AU2VhcmNoT3B0aW9uAEdldEZpbGVzAEdldABnZXRfRnVs
bE5hbWUAQ29udGFpbnMAQXJyYXkAR2V0VXBwZXJCb3VuZABHZXRMb3dlckJvdW5kAEludDMyAEZp
cmVXYXJuaW5nAERlbGV0ZQBGaWxlU3RyZWFtAEZpbGVNb2RlAEZpbGVBY2Nlc3MASUNTaGFycENv
ZGUuU2hhcnBaaXBMaWIASUNTaGFycENvZGUuU2hhcnBaaXBMaWIuWmlwAFppcElucHV0U3RyZWFt
AFN0cmVhbQBaaXBFbnRyeQBHZXROZXh0RW50cnkAZ2V0X05hbWUAQnl0ZQBSZWFkAFdyaXRlAENs
b3NlAFNUXzdmOWM5ZmFhYjk0NjRhYzU4OWVkM2ZiMWNmMjZlOTg0LlByb3BlcnRpZXMuUmVzb3Vy
Y2VzLnJlc291cmNlcwAAcVMAVABfADcAZgA5AGMAOQBmAGEAYQBiADkANAA2ADQAYQBjADUAOAA5
AGUAZAAzAGYAYgAxAGMAZgAyADYAZQA5ADgANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUA
cwBvAHUAcgBjAGUAcwAAPyQAUAByAG8AagBlAGMAdAA6ADoAVwBhAHQAYwBoAGUAcgBJAG4AcAB1
AHQARgBpAGwAZQBNAGEAcwBrADEAAD8kAFAAcgBvAGoAZQBjAHQAOgA6AFcAYQB0AGMAaABlAHIA
SQBuAHAAdQB0AEYAaQBsAGUATQBhAHMAawAyAAA/JABQAHIAbwBqAGUAYwB0ADoAOgBXAGEAdABj
AGgAZQByAEkAbgBwAHUAdABGAGkAbABlAE0AYQBzAGsAMwAAPyQAUAByAG8AagBlAGMAdAA6ADoA
VwBhAHQAYwBoAGUAcgBJAG4AcAB1AHQARgBpAGwAZQBNAGEAcwBrADQAAAcqAC4AKgAAA04AAElV
AHMAZQByADoAOgBIAEkAQwBTAFMAdQBwAHAAbABlAG0AZQBuAHQAYQByAHkARABpAHIAZQBjAHQA
bwByAHkATgBhAG0AZQAARVUAcwBlAHIAOgA6AFcAYQB0AGMAaABlAHIASQBuAGMAbAB1AGQAZQBT
AHUAYgBEAGkAcgBlAGMAdABvAHIAaQBlAHMAAEdVAHMAZQByADoAOgBXAGEAdABjAGgAZQByAEkA
bgBwAHUAdABGAGkAbgBkAEUAeABpAHMAdABpAG4AZwBGAGkAbABlAHMAAEVVAHMAZQByADoAOgBX
AGEAdABjAGgAZQByAEkAbgBwAHUAdABUAGkAbQBlAG8AdQB0AEEAcwBXAGEAcgBuAGkAbgBnAABB
VQBzAGUAcgA6ADoAVwBhAHQAYwBoAGUAcgBJAG4AcAB1AHQAVABpAG0AZQBvAHUAdABTAGUAYwBv
AG4AZABzAABBRABpAHIAZQBjAHQAbwByAHkAIAByAGUAYQBkAHkAIABmAG8AcgAgAHAAcgBvAGMA
ZQBzAHMAaQBuAGcAOgAgAAABAC1FAHgAaQBzAHQAaQBuAGcAIABGAGkAbABlAHMAIABGAG8AdQBu
AGQAOgAgAAA3IABOAG8AIABFAHgAaQBzAHQAcwBpAG4AZwAgAEYAaQBsAGUAcwAgAEYAbwB1AG4A
ZAA6ACAAAA0qAC4AegBpAHAAKgAAA1wAAAAcjoJkxVjLSrfKQvE6hOIQAAi3elxWGTTgiQiJhF3N
gIDMkQMGEhUDBhIZAyAAAQQAABIVBAAAEhkFAAEBEhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwD
BhIdCCAFAQ4OAgIIBiACARwSIQYgAgEOEiUMIAMBDhQOAgACAAACDSADARIlDhQOAgACAAAGIAMB
Dg4IAgYIAwYRFAQAAAAABAEAAAADBhEYBAIAAAAECgAAAAQgAQEOBCABAQgGAAESXRFhBCAAEmUG
IAIBDhJlBAcBEhUFIAEBEW0IAQACAAAAAAADAAABBCAAEnkEIAASfQYgARKAgRwDIAAcAyAADgcU
DgIAAgAABSACAQgIBiADAQgIDgQAAQIcBAABCBwFIAASgIkCBg4IIAUCCA4ODggeBw4ODg4ODhQO
AgACAAAOAgICCAgSgI0UDgIAAgAABCABAQIFIAIBHBgGIAEBEoCZCCABEYCdEYChBQcBEoCVBQAC
Dg4OCiAGAQgODg4IEAIeBwsSgJUODg4OFA4CAAIAAA4SJQISgI0UDgIAAgAABSAAEYCpAyAACgkA
AgIRgKkRgKkPBwURgKkSgK0IEYCpEoCNCSACHRIdDhGAsQUgAg4ICAQgAQIOBCABCAgIIAUBCA4O
DggSBwoCEiUdEh0OCBIdCB0SHQgIBiABHRIdDhEHCA4OHRIdEh0IEoCNHRIdCAogAwEOEYDBEYDF
CBsD5qzxFk9zBiABARKAzQUgABKA0QYAAw4ODg4HIAMIHQUICAcgAwEdBQgIFAcHEoC9EoDJEoDR
EoC9CB0FEoCNRwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNw
bGF5TmFtZRAuTkVUIEZyYW1ld29yayA0KAEAI1NUXzdmOWM5ZmFhYjk0NjRhYzU4OWVkM2ZiMWNm
MjZlOTg0AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTYAAAgBAAgAAAAAAB4BAAEAVAIWV3Jh
cE5vbkV4Y2VwdGlvblRocm93cwH4QAAAAAAAAAAAAAAOQQAAACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAEEAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAA
ALADAAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQDkcxAXAAABAORzEBc/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sAQQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAANABi
ADAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8ANwBmADkA
YwA5AGYAYQBhAGIAOQA0ADYANABhAGMANQA4ADkAZQBkADMAZgBiADEAYwBmADIANgBlADkAOAA0
AAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUAOQAwADQALgAyADkA
NgA2ADgAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYQA5ADgAYwBk
ADAAYgAzADEANgBmADQANABmADEAMABhAGQAMwAzAGIAMQBiAGIANQBkADAANgAxADEANgAwAC4A
ZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBn
AGgAdAAgAEAAIAAgADIAMAAxADYAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEA
bQBlAAAAUwBUAF8AYQA5ADgAYwBkADAAYgAzADEANgBmADQANABmADEAMABhAGQAMwAzAGIAMQBi
AGIANQBkADAANgAxADEANgAwAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUA
AAAAAFMAVABfADcAZgA5AGMAOQBmAGEAYQBiADkANAA2ADQAYQBjADUAOAA5AGUAZAAzAGYAYgAx
AGMAZgAyADYAZQA5ADgANAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEA
LgAwAC4ANQA5ADAANAAuADIAOQA2ADYAOAAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANQA5ADAANAAuADIAOQA2ADYAOAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAAAgMQAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnVariableValueChanged]"
      DTS:CreationName="OnVariableValueChanged"
      DTS:DTSID="{C6DFE3B7-A431-4CE4-AD64-05AAEBF58097}"
      DTS:EventID="167458532"
      DTS:EventName="OnVariableValueChanged"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{DC348A77-4DF9-43C8-8135-4210DC973599}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnVariableValueChanged]\Script Task"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{17F16393-5C0C-43D2-A494-3DBE2E3A81EA}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_159012f5363c44ed8cfc71e0fed1a78d"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::WatcherOutputFileName">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_159012f5363c44ed8cfc71e0fed1a78d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_159012f5363c44ed8cfc71e0fed1a78d")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_159012f5363c44ed8cfc71e0fed1a78d.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{597a6e4c-79fd-411e-8571-eb964b3638b3}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_159012f5363c44ed8cfc71e0fed1a78d</RootNamespace>
    <AssemblyName>ST_159012f5363c44ed8cfc71e0fed1a78d</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe"
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_159012f5363c44ed8cfc71e0fed1a78d
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here
            string OutputFileName = Dts.Variables["User::WatcherOutputFileName"].Value.ToString();
            if ( OutputFileName != null)
            {
			    Dts.TaskResult = (int)ScriptResults.Success;
            }
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_159012f5363c44ed8cfc71e0fed1a78d</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_159012f5363c44ed8cfc71e0fed1a78d</msb:DisplayName>
		<msb:ProjectId>{134188A0-84F5-4EC9-AC72-7F14BB18CA41}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_159012f5363c44ed8cfc71e0fed1a78d.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="3c31511edda84ee8ba4983cc43332322">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>95</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_159012f5363c44ed8cfc71e0fed1a78d.Properties.Settings.get_Default():ST_159012f5363c44ed8cfc71e0fed1a78d.Properties.Sett" +
    "ings")]

namespace ST_159012f5363c44ed8cfc71e0fed1a78d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_159012f5363c44ed8cfc71e0fed1a78d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_159012f5363c44ed8cfc71e0fed1a78d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_159012f5363c44ed8cfc71e0fed1a78d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_159012f5363c44ed8cfc71e0fed1a78d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_159012f5363c44ed8cfc71e0fed1a78d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_159012f5363c44ed8cfc71e0fed1a78d.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDALLU1VYAAAAAAAAAAOAAAiELAQsAABAAAAAIAAAAAAAA/i0A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKwtAABPAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAABA4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADg
LQAAAAAAAEgAAAACAAUAuCEAAPQLAAABAAAAAAAAAAAhAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwAgAwAAAAAgAAEQIoFgAACm8XAAAKcnMAAHBvGAAACm8ZAAAKbxoA
AAoKBiwMAigWAAAKFm8bAAAKKh4CKBwAAAoqtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3Vy
Y2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5S
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2
NC4wLjMwMzE5AAAAAAUAbAAAAMADAAAjfgAALAQAAKwFAAAjU3RyaW5ncwAAAADYCQAArAAAACNV
UwCECgAAEAAAACNHVUlEAAAAlAoAAGABAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+iUzABYA
AAEAAAAdAAAABQAAAAYAAAAJAAAAAQAAABwAAAACAAAADwAAAAIAAAACAAAAAwAAAAQAAAABAAAA
BAAAAAEAAAABAAAAAAAKAAEAAAAAAAYAwQC6AAoA3QDIAA4APQEUAQYAWQG6AAYAbwFeAQYAoAGL
AQYAVwI9AgYAggJwAgYAmQJwAgYAtgJwAgYA1QJwAgYA7gJwAgYABwNwAgYAIgNwAgYAPQNwAgYA
VgNwAgYAjwNvAwYArwNvAwYA4APNAwYA/QO6AAYAAgS6AAYAJgRwAgoAUgQ8BAoAawQ8BAYAgARv
Aw4AogQUAQ4AxAQUARIAHQX9BBIANQX9BAAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAA
awA8AAkAAwAFAAEAEAB0AH8ADQAEAAgAAwEAAKMAAAARAAQACgARAH8BEwARAKwBFwARAPYBOQAG
Bh8CRwBWgCcCSgBWgC8CSgBQIAAAAACDGLwBGwABAFggAAAAAJMIwgEfAAEAkSAAAAAAkwjWASQA
AQCYIAAAAACTCOIBKQABAKAgAAAAAJYIBgI9AAIAsyAAAAAAhhi8ARsAAgCnIAAAAACRGJsEiQAC
ALwgAAAAAIYAGgIbAAIA+CAAAAAAhhi8ARsAAgAAAAEANwI5ALwBWABBALwBWABJALwBWABRALwB
WABZALwBWABhALwBWABpALwBWABxALwBWAB5ALwBWACBALwBWACJALwBXQCRALwBGwCZALwBGwAJ
ALwBGwChABQEYgChAC8EaQApALwBbgC5ALwBegDJALwBGwARALwBGwDRALwBGwAZANYEjQDZACcF
kgDhAD4FlwDpAEcFnQAJAFEFoQDZAFoFXQAZALwBGwAIABQATgAIABgAUwApAJMAgAAuABsAGgEu
ACMAGgEuAGMAQAEuAAsAqQAuABMA8QAuADMA8QAuACsAGgEuADsAIAEuAEMAGgEuAFsANwFDAGsA
UwBJAJMAgABhAJsAUwCDAKsAUwB1AKUAAgABAAMAAwAAAG8BLwAAAO4BNAAAABICQgACAAIAAwAC
AAMABQABAAQABQACAAUABwAEgAAAAQAAABAXcVkAAAAAAAB/AAAABAAAAAAAAAAAAAAAAQCxAAAA
AAAEAAAAAAAAAAAAAAABALoAAAAAAAsAAAAAAAAAAAAAAAoA9QAAAAAACwAAAAAAAAAAAAAACgDe
BAAAAAAAAAAAAQAAAGkFAAAFAAQAAAAAAAA8TW9kdWxlPgBTVF8xNTkwMTJmNTM2M2M0NGVkOGNm
YzcxZTBmZWQxYTc4ZC5kbGwAUmVzb3VyY2VzAFNUXzE1OTAxMmY1MzYzYzQ0ZWQ4Y2ZjNzFlMGZl
ZDFhNzhkLlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8xNTkwMTJmNTM2M2M0NGVk
OGNmYzcxZTBmZWQxYTc4ZABTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lz
dGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNl
cnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sA
VlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJj
ZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVz
b3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1
bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABNYWluAHZh
bHVlX18AU3VjY2VzcwBGYWlsdXJlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFy
Z2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRy
aWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25B
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0
ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBB
c3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5S
dW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBS
dW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJO
b25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFu
ZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJv
d3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0
cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAU2NyaXB0T2Jq
ZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0
LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0X1ZhcmlhYmxlcwBWYXJpYWJsZQBn
ZXRfSXRlbQBnZXRfVmFsdWUAVG9TdHJpbmcAc2V0X1Rhc2tSZXN1bHQAU1RfMTU5MDEyZjUzNjNj
NDRlZDhjZmM3MWUwZmVkMWE3OGQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAABxUwBU
AF8AMQA1ADkAMAAxADIAZgA1ADMANgAzAGMANAA0AGUAZAA4AGMAZgBjADcAMQBlADAAZgBlAGQA
MQBhADcAOABkAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAA3VQBz
AGUAcgA6ADoAVwBhAHQAYwBoAGUAcgBPAHUAdABwAHUAdABGAGkAbABlAE4AYQBtAGUAAADSIu75
+1TnTobGWGWpm1xKAAi3elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZAyAAAQQAABIVBAAAEhkFAAEB
EhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwCBggDBhEUBAAAAAAEAQAAAAQgAQEOBCABAQgGAAES
URFVBCAAElkGIAIBDhJZBAcBEhUFIAEBEWEIAQACAAAAAAADAAABBCAAEm0EIAAScQUgARJ1HAMg
ABwDIAAOAwcBDkcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlz
cGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNCgBACNTVF8xNTkwMTJmNTM2M2M0NGVkOGNmYzcxZTBm
ZWQxYTc4ZAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE2AAAIAQAIAAAAAAAeAQABAFQCFldy
YXBOb25FeGNlcHRpb25UaHJvd3MBANQtAAAAAAAAAAAAAO4tAAAAIAAAAAAAAAAAAAAAAAAAAAAA
AAAAAADgLQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAALADAAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQBxWRAXAAABAHFZEBc/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAQQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAA
MAAwADAANABiADAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8AMQA1ADkAMAAxADIAZgA1ADMANgAzAGMANAA0AGUAZAA4AGMAZgBjADcAMQBlADAAZgBlAGQA
MQBhADcAOABkAAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUAOQAw
ADQALgAyADIAOAA5ADcAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8A
MQA1ADkAMAAxADIAZgA1ADMANgAzAGMANAA0AGUAZAA4AGMAZgBjADcAMQBlADAAZgBlAGQAMQBh
ADcAOABkAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8A
cAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADYAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBp
AGwAZQBuAGEAbQBlAAAAUwBUAF8AMQA1ADkAMAAxADIAZgA1ADMANgAzAGMANAA0AGUAZAA4AGMA
ZgBjADcAMQBlADAAZgBlAGQAMQBhADcAOABkAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0
AE4AYQBtAGUAAAAAAFMAVABfADEANQA5ADAAMQAyAGYANQAzADYAMwBjADQANABlAGQAOABjAGYA
YwA3ADEAZQAwAGYAZQBkADEAYQA3ADgAZAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4ANQA5ADAANAAuADIAMgA4ADkANwAAAAAASAAPAAEAQQBzAHMAZQBtAGIA
bAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQA5ADAANAAuADIAMgA4ADkANwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAAPgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="95"
                Column="13" />
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\FileWatcher"
          TopLeft="151,89" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnVariableValueChanged]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package.EventHandlers[OnVariableValueChanged]\Script Task"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>